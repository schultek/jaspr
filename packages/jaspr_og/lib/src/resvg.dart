// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:jaspr_og/resvgc')
library;

import 'dart:ffi' as ffi;

/// @brief Creates an identity transform.
@ffi.Native<transform Function()>(symbol: 'resvg_transform_identity')
external transform transform_identity();

/// @brief Initializes the library log.
///
/// Use it if you want to see any warnings.
///
/// Must be called only once.
///
/// All warnings will be printed to the `stderr`.
@ffi.Native<ffi.Void Function()>(symbol: 'resvg_init_log')
external void init_log();

/// @brief Creates a new #resvg_options object.
///
/// Should be destroyed via #resvg_options_destroy.
@ffi.Native<ffi.Pointer<options> Function()>(symbol: 'resvg_options_create')
external ffi.Pointer<options> options_create();

/// @brief Sets a directory that will be used during relative paths resolving.
///
/// Expected to be the same as the directory that contains the SVG file,
/// but can be set to any.
///
/// Must be UTF-8. Can be set to NULL.
///
/// Default: NULL
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_set_resources_dir')
external void options_set_resources_dir(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> path,
);

/// @brief Sets the target DPI.
///
/// Impact units conversion.
///
/// Default: 96
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Float)>(
    symbol: 'resvg_options_set_dpi')
external void options_set_dpi(
  ffi.Pointer<options> opt,
  double dpi,
);

/// @brief Provides the content of a stylesheet that will be used when resolving CSS attributes.
///
/// Must be UTF-8. Can be set to NULL.
///
/// Default: NULL
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_set_stylesheet')
external void options_set_stylesheet(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> content,
);

/// @brief Sets the default font family.
///
/// Will be used when no `font-family` attribute is set in the SVG.
///
/// Must be UTF-8. NULL is not allowed.
///
/// Default: Times New Roman
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_set_font_family')
external void options_set_font_family(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> family,
);

/// @brief Sets the default font size.
///
/// Will be used when no `font-size` attribute is set in the SVG.
///
/// Default: 12
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Float)>(
    symbol: 'resvg_options_set_font_size')
external void options_set_font_size(
  ffi.Pointer<options> opt,
  double size,
);

/// @brief Sets the `serif` font family.
///
/// Must be UTF-8. NULL is not allowed.
///
/// Has no effect when the `text` feature is not enabled.
///
/// Default: Times New Roman
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_set_serif_family')
external void options_set_serif_family(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> family,
);

/// @brief Sets the `sans-serif` font family.
///
/// Must be UTF-8. NULL is not allowed.
///
/// Has no effect when the `text` feature is not enabled.
///
/// Default: Arial
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_set_sans_serif_family')
external void options_set_sans_serif_family(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> family,
);

/// @brief Sets the `cursive` font family.
///
/// Must be UTF-8. NULL is not allowed.
///
/// Has no effect when the `text` feature is not enabled.
///
/// Default: Comic Sans MS
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_set_cursive_family')
external void options_set_cursive_family(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> family,
);

/// @brief Sets the `fantasy` font family.
///
/// Must be UTF-8. NULL is not allowed.
///
/// Has no effect when the `text` feature is not enabled.
///
/// Default: Papyrus on macOS, Impact on other OS'es
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_set_fantasy_family')
external void options_set_fantasy_family(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> family,
);

/// @brief Sets the `monospace` font family.
///
/// Must be UTF-8. NULL is not allowed.
///
/// Has no effect when the `text` feature is not enabled.
///
/// Default: Courier New
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_set_monospace_family')
external void options_set_monospace_family(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> family,
);

/// @brief Sets a comma-separated list of languages.
///
/// Will be used to resolve a `systemLanguage` conditional attribute.
///
/// Example: en,en-US.
///
/// Must be UTF-8. Can be NULL.
///
/// Default: en
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_set_languages')
external void options_set_languages(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> languages,
);

/// @brief Sets the default shape rendering method.
///
/// Will be used when an SVG element's `shape-rendering` property is set to `auto`.
///
/// Default: `RESVG_SHAPE_RENDERING_GEOMETRIC_PRECISION`
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.UnsignedInt)>(
    symbol: 'resvg_options_set_shape_rendering_mode')
external void _options_set_shape_rendering_mode(
  ffi.Pointer<options> opt,
  int mode,
);

void options_set_shape_rendering_mode(
  ffi.Pointer<options> opt,
  resvg_shape_rendering mode,
) =>
    _options_set_shape_rendering_mode(
      opt,
      mode.value,
    );

/// @brief Sets the default text rendering method.
///
/// Will be used when an SVG element's `text-rendering` property is set to `auto`.
///
/// Default: `RESVG_TEXT_RENDERING_OPTIMIZE_LEGIBILITY`
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.UnsignedInt)>(
    symbol: 'resvg_options_set_text_rendering_mode')
external void _options_set_text_rendering_mode(
  ffi.Pointer<options> opt,
  int mode,
);

void options_set_text_rendering_mode(
  ffi.Pointer<options> opt,
  resvg_text_rendering mode,
) =>
    _options_set_text_rendering_mode(
      opt,
      mode.value,
    );

/// @brief Sets the default image rendering method.
///
/// Will be used when an SVG element's `image-rendering` property is set to `auto`.
///
/// Default: `RESVG_IMAGE_RENDERING_OPTIMIZE_QUALITY`
@ffi.Native<ffi.Void Function(ffi.Pointer<options>, ffi.UnsignedInt)>(
    symbol: 'resvg_options_set_image_rendering_mode')
external void _options_set_image_rendering_mode(
  ffi.Pointer<options> opt,
  int mode,
);

void options_set_image_rendering_mode(
  ffi.Pointer<options> opt,
  resvg_image_rendering mode,
) =>
    _options_set_image_rendering_mode(
      opt,
      mode.value,
    );

/// @brief Loads a font data into the internal fonts database.
///
/// Prints a warning into the log when the data is not a valid TrueType font.
///
/// Has no effect when the `text` feature is not enabled.
@ffi.Native<
    ffi.Void Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>,
        ffi.UintPtr)>(symbol: 'resvg_options_load_font_data')
external void options_load_font_data(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> data,
  int len,
);

/// @brief Loads a font file into the internal fonts database.
///
/// Prints a warning into the log when the data is not a valid TrueType font.
///
/// Has no effect when the `text` feature is not enabled.
///
/// @return #resvg_error with RESVG_OK, RESVG_ERROR_NOT_AN_UTF8_STR or RESVG_ERROR_FILE_OPEN_FAILED
@ffi.Native<ffi.Int32 Function(ffi.Pointer<options>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_options_load_font_file')
external int options_load_font_file(
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Uint8> file_path,
);

/// @brief Loads system fonts into the internal fonts database.
///
/// This method is very IO intensive.
///
/// This method should be executed only once per #resvg_options.
///
/// The system scanning is not perfect, so some fonts may be omitted.
/// Please send a bug report in this case.
///
/// Prints warnings into the log.
///
/// Has no effect when the `text` feature is not enabled.
@ffi.Native<ffi.Void Function(ffi.Pointer<options>)>(
    symbol: 'resvg_options_load_system_fonts')
external void options_load_system_fonts(
  ffi.Pointer<options> opt,
);

/// @brief Destroys the #resvg_options.
@ffi.Native<ffi.Void Function(ffi.Pointer<options>)>(
    symbol: 'resvg_options_destroy')
external void options_destroy(
  ffi.Pointer<options> opt,
);

/// @brief Creates #resvg_render_tree from file.
///
/// .svg and .svgz files are supported.
///
/// See #resvg_is_image_empty for details.
///
/// @param file_path UTF-8 file path.
/// @param opt Rendering options. Must not be NULL.
/// @param tree Parsed render tree. Should be destroyed via #resvg_tree_destroy.
/// @return #resvg_error
@ffi.Native<
        ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<options>,
            ffi.Pointer<ffi.Pointer<render_tree>>)>(
    symbol: 'resvg_parse_tree_from_file')
external int parse_tree_from_file(
  ffi.Pointer<ffi.Uint8> file_path,
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Pointer<render_tree>> tree,
);

/// @brief Creates #resvg_render_tree from data.
///
/// See #resvg_is_image_empty for details.
///
/// @param data SVG data. Can contain SVG string or gzip compressed data. Must not be NULL.
/// @param len Data length.
/// @param opt Rendering options. Must not be NULL.
/// @param tree Parsed render tree. Should be destroyed via #resvg_tree_destroy.
/// @return #resvg_error
@ffi.Native<
        ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.UintPtr,
            ffi.Pointer<options>, ffi.Pointer<ffi.Pointer<render_tree>>)>(
    symbol: 'resvg_parse_tree_from_data')
external int parse_tree_from_data(
  ffi.Pointer<ffi.Uint8> data,
  int len,
  ffi.Pointer<options> opt,
  ffi.Pointer<ffi.Pointer<render_tree>> tree,
);

/// @brief Checks that tree has any nodes.
///
/// @param tree Render tree.
/// @return Returns `true` if tree has no nodes.
@ffi.Native<ffi.Bool Function(ffi.Pointer<render_tree>)>(
    symbol: 'resvg_is_image_empty')
external bool is_image_empty(
  ffi.Pointer<render_tree> tree,
);

/// @brief Returns an image size.
///
/// The size of an image that is required to render this SVG.
///
/// Note that elements outside the viewbox will be clipped. This is by design.
/// If you want to render the whole SVG content, use #resvg_get_image_bbox instead.
///
/// @param tree Render tree.
/// @return Image size.
@ffi.Native<size Function(ffi.Pointer<render_tree>)>(
    symbol: 'resvg_get_image_size')
external size get_image_size(
  ffi.Pointer<render_tree> tree,
);

/// @brief Returns an object bounding box.
///
/// This bounding box does not include objects stroke and filter regions.
/// This is what SVG calls "absolute object bonding box".
///
/// If you're looking for a "complete" bounding box see #resvg_get_image_bbox
///
/// @param tree Render tree.
/// @param bbox Image's object bounding box.
/// @return `false` if an image has no elements.
@ffi.Native<ffi.Bool Function(ffi.Pointer<render_tree>, ffi.Pointer<rect>)>(
    symbol: 'resvg_get_object_bbox')
external bool get_object_bbox(
  ffi.Pointer<render_tree> tree,
  ffi.Pointer<rect> bbox,
);

/// @brief Returns an image bounding box.
///
/// This bounding box contains the maximum SVG dimensions.
/// It's size can be bigger or smaller than #resvg_get_image_size
/// Use it when you want to avoid clipping of elements that are outside the SVG viewbox.
///
/// @param tree Render tree.
/// @param bbox Image's bounding box.
/// @return `false` if an image has no elements.
@ffi.Native<ffi.Bool Function(ffi.Pointer<render_tree>, ffi.Pointer<rect>)>(
    symbol: 'resvg_get_image_bbox')
external bool get_image_bbox(
  ffi.Pointer<render_tree> tree,
  ffi.Pointer<rect> bbox,
);

/// @brief Returns `true` if a renderable node with such an ID exists.
///
/// @param tree Render tree.
/// @param id Node's ID. UTF-8 string. Must not be NULL.
/// @return `true` if a node exists.
/// @return `false` if a node doesn't exist or ID isn't a UTF-8 string.
/// @return `false` if a node exists, but not renderable.
@ffi.Native<
        ffi.Bool Function(ffi.Pointer<render_tree>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'resvg_node_exists')
external bool node_exists(
  ffi.Pointer<render_tree> tree,
  ffi.Pointer<ffi.Uint8> id,
);

/// @brief Returns node's transform by ID.
///
/// @param tree Render tree.
/// @param id Node's ID. UTF-8 string. Must not be NULL.
/// @param transform Node's transform.
/// @return `true` if a node exists.
/// @return `false` if a node doesn't exist or ID isn't a UTF-8 string.
/// @return `false` if a node exists, but not renderable.
@ffi.Native<
    ffi.Bool Function(ffi.Pointer<render_tree>, ffi.Pointer<ffi.Uint8>,
        ffi.Pointer<transform>)>(symbol: 'resvg_get_node_transform')
external bool get_node_transform(
  ffi.Pointer<render_tree> tree,
  ffi.Pointer<ffi.Uint8> id,
  ffi.Pointer<transform> transform,
);

/// @brief Returns node's bounding box in canvas coordinates by ID.
///
/// @param tree Render tree.
/// @param id Node's ID. Must not be NULL.
/// @param bbox Node's bounding box.
/// @return `false` if a node with such an ID does not exist
/// @return `false` if ID isn't a UTF-8 string.
/// @return `false` if ID is an empty string
@ffi.Native<
    ffi.Bool Function(ffi.Pointer<render_tree>, ffi.Pointer<ffi.Uint8>,
        ffi.Pointer<rect>)>(symbol: 'resvg_get_node_bbox')
external bool get_node_bbox(
  ffi.Pointer<render_tree> tree,
  ffi.Pointer<ffi.Uint8> id,
  ffi.Pointer<rect> bbox,
);

/// @brief Returns node's bounding box, including stroke, in canvas coordinates by ID.
///
/// @param tree Render tree.
/// @param id Node's ID. Must not be NULL.
/// @param bbox Node's bounding box.
/// @return `false` if a node with such an ID does not exist
/// @return `false` if ID isn't a UTF-8 string.
/// @return `false` if ID is an empty string
@ffi.Native<
    ffi.Bool Function(ffi.Pointer<render_tree>, ffi.Pointer<ffi.Uint8>,
        ffi.Pointer<rect>)>(symbol: 'resvg_get_node_stroke_bbox')
external bool get_node_stroke_bbox(
  ffi.Pointer<render_tree> tree,
  ffi.Pointer<ffi.Uint8> id,
  ffi.Pointer<rect> bbox,
);

/// @brief Destroys the #resvg_render_tree.
@ffi.Native<ffi.Void Function(ffi.Pointer<render_tree>)>(
    symbol: 'resvg_tree_destroy')
external void tree_destroy(
  ffi.Pointer<render_tree> tree,
);

/// @brief Renders the #resvg_render_tree onto the pixmap.
///
/// @param tree A render tree.
/// @param transform A root SVG transform. Can be used to position SVG inside the `pixmap`.
/// @param width Pixmap width.
/// @param height Pixmap height.
/// @param pixmap Pixmap data. Should have width*height*4 size and contain
/// premultiplied RGBA8888 pixels.
@ffi.Native<
    ffi.Void Function(ffi.Pointer<render_tree>, transform, ffi.Uint32,
        ffi.Uint32, ffi.Pointer<ffi.Uint8>)>(symbol: 'resvg_render')
external void render(
  ffi.Pointer<render_tree> tree,
  transform transform,
  int width,
  int height,
  ffi.Pointer<ffi.Uint8> pixmap,
);

/// @brief Renders a Node by ID onto the image.
///
/// @param tree A render tree.
/// @param id Node's ID. Must not be NULL.
/// @param transform A root SVG transform. Can be used to position SVG inside the `pixmap`.
/// @param width Pixmap width.
/// @param height Pixmap height.
/// @param pixmap Pixmap data. Should have width*height*4 size and contain
/// premultiplied RGBA8888 pixels.
/// @return `false` when `id` is not a non-empty UTF-8 string.
/// @return `false` when the selected `id` is not present.
/// @return `false` when an element has a zero bbox.
@ffi.Native<
    ffi.Bool Function(
        ffi.Pointer<render_tree>,
        ffi.Pointer<ffi.Uint8>,
        transform,
        ffi.Uint32,
        ffi.Uint32,
        ffi.Pointer<ffi.Uint8>)>(symbol: 'resvg_render_node')
external bool render_node(
  ffi.Pointer<render_tree> tree,
  ffi.Pointer<ffi.Uint8> id,
  transform transform,
  int width,
  int height,
  ffi.Pointer<ffi.Uint8> pixmap,
);

typedef int_least8_t = ffi.Int8;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Int16;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int32;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.Int64;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.Uint8;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.Uint16;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.Uint32;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.Uint64;
typedef Dartuint_least64_t = int;
typedef int_fast8_t = ffi.Int8;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int16;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int32;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Int64;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.Uint8;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.Uint16;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.Uint32;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.Uint64;
typedef Dartuint_fast64_t = int;
typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef __darwin_intptr_t = ffi.Long;
typedef Dart__darwin_intptr_t = int;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;
typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

typedef __darwin_mbstate_t = __mbstate_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef __builtin_va_list = ffi.Pointer<ffi.Uint8>;
typedef __darwin_va_list = __builtin_va_list;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;
typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wint_t = ffi.Int;
typedef Dart__darwin_wint_t = int;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef __darwin_socklen_t = __uint32_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_blkcnt_t = __int64_t;
typedef __darwin_blksize_t = __int32_t;
typedef __darwin_dev_t = __int32_t;
typedef __darwin_fsblkcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsblkcnt_t = int;
typedef __darwin_fsfilcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsfilcnt_t = int;
typedef __darwin_gid_t = __uint32_t;
typedef __darwin_id_t = __uint32_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mode_t = __uint16_t;
typedef __darwin_off_t = __int64_t;
typedef __darwin_pid_t = __int32_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __darwin_suseconds_t = __int32_t;
typedef __darwin_uid_t = __uint32_t;
typedef __darwin_useconds_t = __uint32_t;

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Uint8> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Uint8> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Uint8> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Uint8> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Uint8> __opaque;
}

typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int16_t = ffi.UnsignedShort;
typedef Dartu_int16_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;
typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;
typedef register_t = ffi.Int64;
typedef Dartregister_t = int;
typedef user_addr_t = u_int64_t;
typedef user_size_t = u_int64_t;
typedef user_ssize_t = ffi.Int64;
typedef Dartuser_ssize_t = int;
typedef user_long_t = ffi.Int64;
typedef Dartuser_long_t = int;
typedef user_ulong_t = u_int64_t;
typedef user_time_t = ffi.Int64;
typedef Dartuser_time_t = int;
typedef user_off_t = ffi.Int64;
typedef Dartuser_off_t = int;
typedef syscall_arg_t = u_int64_t;
typedef intmax_t = ffi.Long;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLong;
typedef Dartuintmax_t = int;

/// @brief List of possible errors.
enum resvg_error {
  /// Everything is ok.
  RESVG_OK(0),

  /// Only UTF-8 content are supported.
  RESVG_ERROR_NOT_AN_UTF8_STR(1),

  /// Failed to open the provided file.
  RESVG_ERROR_FILE_OPEN_FAILED(2),

  /// Compressed SVG must use the GZip algorithm.
  RESVG_ERROR_MALFORMED_GZIP(3),

  /// We do not allow SVG with more than 1_000_000 elements for security reasons.
  RESVG_ERROR_ELEMENTS_LIMIT_REACHED(4),

  /// SVG doesn't have a valid size.
  ///
  /// Occurs when width and/or height are <= 0.
  ///
  /// Also occurs if width, height and viewBox are not set.
  RESVG_ERROR_INVALID_SIZE(5),

  /// Failed to parse an SVG data.
  RESVG_ERROR_PARSING_FAILED(6);

  final int value;
  const resvg_error(this.value);

  static resvg_error fromValue(int value) => switch (value) {
        0 => RESVG_OK,
        1 => RESVG_ERROR_NOT_AN_UTF8_STR,
        2 => RESVG_ERROR_FILE_OPEN_FAILED,
        3 => RESVG_ERROR_MALFORMED_GZIP,
        4 => RESVG_ERROR_ELEMENTS_LIMIT_REACHED,
        5 => RESVG_ERROR_INVALID_SIZE,
        6 => RESVG_ERROR_PARSING_FAILED,
        _ => throw ArgumentError('Unknown value for resvg_error: $value'),
      };
}

/// @brief A image rendering method.
enum resvg_image_rendering {
  RESVG_IMAGE_RENDERING_OPTIMIZE_QUALITY(0),
  RESVG_IMAGE_RENDERING_OPTIMIZE_SPEED(1);

  final int value;
  const resvg_image_rendering(this.value);

  static resvg_image_rendering fromValue(int value) => switch (value) {
        0 => RESVG_IMAGE_RENDERING_OPTIMIZE_QUALITY,
        1 => RESVG_IMAGE_RENDERING_OPTIMIZE_SPEED,
        _ => throw ArgumentError(
            'Unknown value for resvg_image_rendering: $value'),
      };
}

/// @brief A shape rendering method.
enum resvg_shape_rendering {
  RESVG_SHAPE_RENDERING_OPTIMIZE_SPEED(0),
  RESVG_SHAPE_RENDERING_CRISP_EDGES(1),
  RESVG_SHAPE_RENDERING_GEOMETRIC_PRECISION(2);

  final int value;
  const resvg_shape_rendering(this.value);

  static resvg_shape_rendering fromValue(int value) => switch (value) {
        0 => RESVG_SHAPE_RENDERING_OPTIMIZE_SPEED,
        1 => RESVG_SHAPE_RENDERING_CRISP_EDGES,
        2 => RESVG_SHAPE_RENDERING_GEOMETRIC_PRECISION,
        _ => throw ArgumentError(
            'Unknown value for resvg_shape_rendering: $value'),
      };
}

/// @brief A text rendering method.
enum resvg_text_rendering {
  RESVG_TEXT_RENDERING_OPTIMIZE_SPEED(0),
  RESVG_TEXT_RENDERING_OPTIMIZE_LEGIBILITY(1),
  RESVG_TEXT_RENDERING_GEOMETRIC_PRECISION(2);

  final int value;
  const resvg_text_rendering(this.value);

  static resvg_text_rendering fromValue(int value) => switch (value) {
        0 => RESVG_TEXT_RENDERING_OPTIMIZE_SPEED,
        1 => RESVG_TEXT_RENDERING_OPTIMIZE_LEGIBILITY,
        2 => RESVG_TEXT_RENDERING_GEOMETRIC_PRECISION,
        _ =>
          throw ArgumentError('Unknown value for resvg_text_rendering: $value'),
      };
}

final class options extends ffi.Opaque {}

final class render_tree extends ffi.Opaque {}

/// @brief A 2D transform representation.
final class transform extends ffi.Struct {
  @ffi.Float()
  external double a;

  @ffi.Float()
  external double b;

  @ffi.Float()
  external double c;

  @ffi.Float()
  external double d;

  @ffi.Float()
  external double e;

  @ffi.Float()
  external double f;
}

/// @brief A size representation.
final class size extends ffi.Struct {
  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

/// @brief A rectangle representation.
final class rect extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

const int __bool_true_false_are_defined = 1;

const int true$ = 1;

const int false$ = 0;

const int __WORDSIZE = 64;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int RESVG_MAJOR_VERSION = 0;

const int RESVG_MINOR_VERSION = 45;

const int RESVG_PATCH_VERSION = 1;

const String RESVG_VERSION = '0.45.1';
